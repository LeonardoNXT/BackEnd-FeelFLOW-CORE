const mongoose = require("mongoose");

const appointmentSchema = new mongoose.Schema({
  status: {
    type: String,
    enum: ["disponivel", "agendado", "cancelado", "concluido"],
    default: "disponivel", // Novo padr칚o: come칞a como dispon칤vel
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Employee", // Psic칩logo
    required: true,
  },
  organization: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Organization",
    required: true,
  },
  intendedFor: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Customer", // Paciente
    default: null, // Ser치 definido apenas quando o paciente escolher o hor치rio
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  acceptedAt: {
    type: Date,
  },
  // Data e hora de in칤cio do agendamento
  startTime: {
    type: Date,
    required: true,
  },
  // Dura칞칚o em minutos
  duration: {
    type: Number,
    required: true,
  },
  // Tempo final calculado automaticamente
  endTime: {
    type: Date,
  },
  send_email: {
    type: Boolean,
    default: false,
  },
});

// Garante que n칚o existam sobreposi칞칫es de hor치rios do mesmo psic칩logo
appointmentSchema.pre("save", async function (next) {
  if (!this.isModified("startTime") && !this.isModified("duration"))
    return next();

  // 游댳 Calcula o hor치rio de t칠rmino
  this.endTime = new Date(this.startTime.getTime() + this.duration * 60000);

  // 游댳 Verifica se o hor치rio ultrapassa 22h
  const startHour = this.startTime.getHours();
  const endHour = this.endTime.getHours();

  // Se o in칤cio OU o fim for >= 22h (10 da noite), bloqueia
  if (startHour >= 22 || endHour >= 22) {
    const err = new Error("Hor치rios ap칩s as 22:00 n칚o s칚o permitidos.");
    return next(err);
  }

  if (startHour < 6) {
    const err = new Error("Hor치rios antes das 06:00 n칚o s칚o permitidos.");
    return next(err);
  }

  // 游댳 Verifica conflito de hor치rios
  const overlap = await mongoose.model("Appointment").findOne({
    createdBy: this.createdBy,
    status: { $in: ["disponivel", "agendado"] },
    $or: [
      { startTime: { $lt: this.endTime }, endTime: { $gt: this.startTime } },
    ],
    _id: { $ne: this._id },
  });

  if (overlap) {
    const err = new Error("Hor치rio conflita com outro agendamento existente.");
    return next(err);
  }

  next();
});

const Appointment = mongoose.model("Appointment", appointmentSchema);

module.exports = Appointment;
